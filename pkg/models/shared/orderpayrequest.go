// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/go-sdk/v2/pkg/utils"
)

type PaymentMethodType string

const (
	PaymentMethodTypeCardPaymentMethod        PaymentMethodType = "CardPaymentMethod"
	PaymentMethodTypeUPIPaymentMethod         PaymentMethodType = "UPIPaymentMethod"
	PaymentMethodTypeNetBankingPaymentMethod  PaymentMethodType = "NetBankingPaymentMethod"
	PaymentMethodTypeAppPaymentMethod         PaymentMethodType = "AppPaymentMethod"
	PaymentMethodTypeCardEMIPaymentMethod     PaymentMethodType = "CardEMIPaymentMethod"
	PaymentMethodTypeCardlessEMIPaymentMethod PaymentMethodType = "CardlessEMIPaymentMethod"
	PaymentMethodTypePaylaterPaymentMethod    PaymentMethodType = "PaylaterPaymentMethod"
)

type PaymentMethod struct {
	CardPaymentMethod        *CardPaymentMethod
	UPIPaymentMethod         *UPIPaymentMethod
	NetBankingPaymentMethod  *NetBankingPaymentMethod
	AppPaymentMethod         *AppPaymentMethod
	CardEMIPaymentMethod     *CardEMIPaymentMethod
	CardlessEMIPaymentMethod *CardlessEMIPaymentMethod
	PaylaterPaymentMethod    *PaylaterPaymentMethod

	Type PaymentMethodType
}

func CreatePaymentMethodCardPaymentMethod(cardPaymentMethod CardPaymentMethod) PaymentMethod {
	typ := PaymentMethodTypeCardPaymentMethod

	return PaymentMethod{
		CardPaymentMethod: &cardPaymentMethod,
		Type:              typ,
	}
}

func CreatePaymentMethodUPIPaymentMethod(upiPaymentMethod UPIPaymentMethod) PaymentMethod {
	typ := PaymentMethodTypeUPIPaymentMethod

	return PaymentMethod{
		UPIPaymentMethod: &upiPaymentMethod,
		Type:             typ,
	}
}

func CreatePaymentMethodNetBankingPaymentMethod(netBankingPaymentMethod NetBankingPaymentMethod) PaymentMethod {
	typ := PaymentMethodTypeNetBankingPaymentMethod

	return PaymentMethod{
		NetBankingPaymentMethod: &netBankingPaymentMethod,
		Type:                    typ,
	}
}

func CreatePaymentMethodAppPaymentMethod(appPaymentMethod AppPaymentMethod) PaymentMethod {
	typ := PaymentMethodTypeAppPaymentMethod

	return PaymentMethod{
		AppPaymentMethod: &appPaymentMethod,
		Type:             typ,
	}
}

func CreatePaymentMethodCardEMIPaymentMethod(cardEMIPaymentMethod CardEMIPaymentMethod) PaymentMethod {
	typ := PaymentMethodTypeCardEMIPaymentMethod

	return PaymentMethod{
		CardEMIPaymentMethod: &cardEMIPaymentMethod,
		Type:                 typ,
	}
}

func CreatePaymentMethodCardlessEMIPaymentMethod(cardlessEMIPaymentMethod CardlessEMIPaymentMethod) PaymentMethod {
	typ := PaymentMethodTypeCardlessEMIPaymentMethod

	return PaymentMethod{
		CardlessEMIPaymentMethod: &cardlessEMIPaymentMethod,
		Type:                     typ,
	}
}

func CreatePaymentMethodPaylaterPaymentMethod(paylaterPaymentMethod PaylaterPaymentMethod) PaymentMethod {
	typ := PaymentMethodTypePaylaterPaymentMethod

	return PaymentMethod{
		PaylaterPaymentMethod: &paylaterPaymentMethod,
		Type:                  typ,
	}
}

func (u *PaymentMethod) UnmarshalJSON(data []byte) error {

	cardPaymentMethod := CardPaymentMethod{}
	if err := utils.UnmarshalJSON(data, &cardPaymentMethod, "", true, true); err == nil {
		u.CardPaymentMethod = &cardPaymentMethod
		u.Type = PaymentMethodTypeCardPaymentMethod
		return nil
	}

	upiPaymentMethod := UPIPaymentMethod{}
	if err := utils.UnmarshalJSON(data, &upiPaymentMethod, "", true, true); err == nil {
		u.UPIPaymentMethod = &upiPaymentMethod
		u.Type = PaymentMethodTypeUPIPaymentMethod
		return nil
	}

	netBankingPaymentMethod := NetBankingPaymentMethod{}
	if err := utils.UnmarshalJSON(data, &netBankingPaymentMethod, "", true, true); err == nil {
		u.NetBankingPaymentMethod = &netBankingPaymentMethod
		u.Type = PaymentMethodTypeNetBankingPaymentMethod
		return nil
	}

	appPaymentMethod := AppPaymentMethod{}
	if err := utils.UnmarshalJSON(data, &appPaymentMethod, "", true, true); err == nil {
		u.AppPaymentMethod = &appPaymentMethod
		u.Type = PaymentMethodTypeAppPaymentMethod
		return nil
	}

	cardEMIPaymentMethod := CardEMIPaymentMethod{}
	if err := utils.UnmarshalJSON(data, &cardEMIPaymentMethod, "", true, true); err == nil {
		u.CardEMIPaymentMethod = &cardEMIPaymentMethod
		u.Type = PaymentMethodTypeCardEMIPaymentMethod
		return nil
	}

	cardlessEMIPaymentMethod := CardlessEMIPaymentMethod{}
	if err := utils.UnmarshalJSON(data, &cardlessEMIPaymentMethod, "", true, true); err == nil {
		u.CardlessEMIPaymentMethod = &cardlessEMIPaymentMethod
		u.Type = PaymentMethodTypeCardlessEMIPaymentMethod
		return nil
	}

	paylaterPaymentMethod := PaylaterPaymentMethod{}
	if err := utils.UnmarshalJSON(data, &paylaterPaymentMethod, "", true, true); err == nil {
		u.PaylaterPaymentMethod = &paylaterPaymentMethod
		u.Type = PaymentMethodTypePaylaterPaymentMethod
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PaymentMethod) MarshalJSON() ([]byte, error) {
	if u.CardPaymentMethod != nil {
		return utils.MarshalJSON(u.CardPaymentMethod, "", true)
	}

	if u.UPIPaymentMethod != nil {
		return utils.MarshalJSON(u.UPIPaymentMethod, "", true)
	}

	if u.NetBankingPaymentMethod != nil {
		return utils.MarshalJSON(u.NetBankingPaymentMethod, "", true)
	}

	if u.AppPaymentMethod != nil {
		return utils.MarshalJSON(u.AppPaymentMethod, "", true)
	}

	if u.CardEMIPaymentMethod != nil {
		return utils.MarshalJSON(u.CardEMIPaymentMethod, "", true)
	}

	if u.CardlessEMIPaymentMethod != nil {
		return utils.MarshalJSON(u.CardlessEMIPaymentMethod, "", true)
	}

	if u.PaylaterPaymentMethod != nil {
		return utils.MarshalJSON(u.PaylaterPaymentMethod, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type OrderPayRequest struct {
	// This is required if any offers needs to be applied to the order.
	OfferID          *string       `json:"offer_id,omitempty"`
	PaymentMethod    PaymentMethod `json:"payment_method"`
	PaymentSessionID string        `json:"payment_session_id"`
	SaveInstrument   *bool         `json:"save_instrument,omitempty"`
}

func (o *OrderPayRequest) GetOfferID() *string {
	if o == nil {
		return nil
	}
	return o.OfferID
}

func (o *OrderPayRequest) GetPaymentMethod() PaymentMethod {
	if o == nil {
		return PaymentMethod{}
	}
	return o.PaymentMethod
}

func (o *OrderPayRequest) GetPaymentSessionID() string {
	if o == nil {
		return ""
	}
	return o.PaymentSessionID
}

func (o *OrderPayRequest) GetSaveInstrument() *bool {
	if o == nil {
		return nil
	}
	return o.SaveInstrument
}
